//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace CGWProject.CGW {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CGWSoap", Namespace="http://CGW.UsgKorea.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class CGW : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GridGateWayOperationCompleted;
        
        private System.Threading.SendOrPostCallback TreeGateWayOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CGW() {
            this.Url = global::CGWProject.Properties.Settings.Default.CGWProject_CGW_CGW;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GridGateWayCompletedEventHandler GridGateWayCompleted;
        
        /// <remarks/>
        public event TreeGateWayCompletedEventHandler TreeGateWayCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CGW.UsgKorea.com/GridGateWay", RequestNamespace="http://CGW.UsgKorea.com", ResponseNamespace="http://CGW.UsgKorea.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GridGateWay(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj) {
            object[] results = this.Invoke("GridGateWay", new object[] {
                        bStartQuery,
                        strModule,
                        strClassName,
                        strMethodName,
                        strWhereClause,
                        strCondition,
                        Conditions,
                        GDObj});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GridGateWayAsync(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj) {
            this.GridGateWayAsync(bStartQuery, strModule, strClassName, strMethodName, strWhereClause, strCondition, Conditions, GDObj, null);
        }
        
        /// <remarks/>
        public void GridGateWayAsync(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj, object userState) {
            if ((this.GridGateWayOperationCompleted == null)) {
                this.GridGateWayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGridGateWayOperationCompleted);
            }
            this.InvokeAsync("GridGateWay", new object[] {
                        bStartQuery,
                        strModule,
                        strClassName,
                        strMethodName,
                        strWhereClause,
                        strCondition,
                        Conditions,
                        GDObj}, this.GridGateWayOperationCompleted, userState);
        }
        
        private void OnGridGateWayOperationCompleted(object arg) {
            if ((this.GridGateWayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GridGateWayCompleted(this, new GridGateWayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CGW.UsgKorea.com/TreeGateWay", RequestNamespace="http://CGW.UsgKorea.com", ResponseNamespace="http://CGW.UsgKorea.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] TreeGateWay(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj) {
            object[] results = this.Invoke("TreeGateWay", new object[] {
                        bStartQuery,
                        strModule,
                        strClassName,
                        strMethodName,
                        strWhereClause,
                        strCondition,
                        Conditions,
                        GDObj});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void TreeGateWayAsync(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj) {
            this.TreeGateWayAsync(bStartQuery, strModule, strClassName, strMethodName, strWhereClause, strCondition, Conditions, GDObj, null);
        }
        
        /// <remarks/>
        public void TreeGateWayAsync(bool bStartQuery, string strModule, string strClassName, string strMethodName, string strWhereClause, string strCondition, object[] Conditions, object[] GDObj, object userState) {
            if ((this.TreeGateWayOperationCompleted == null)) {
                this.TreeGateWayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTreeGateWayOperationCompleted);
            }
            this.InvokeAsync("TreeGateWay", new object[] {
                        bStartQuery,
                        strModule,
                        strClassName,
                        strMethodName,
                        strWhereClause,
                        strCondition,
                        Conditions,
                        GDObj}, this.TreeGateWayOperationCompleted, userState);
        }
        
        private void OnTreeGateWayOperationCompleted(object arg) {
            if ((this.TreeGateWayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TreeGateWayCompleted(this, new TreeGateWayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GridGateWayCompletedEventHandler(object sender, GridGateWayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GridGateWayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GridGateWayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void TreeGateWayCompletedEventHandler(object sender, TreeGateWayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TreeGateWayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TreeGateWayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591